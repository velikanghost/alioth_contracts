---
description: 
globs: 
alwaysApply: true
---
# Alioth AI Integration - Smart Contract Development Rules

You are developing AI Integration smart contracts for Alioth, an AI-driven cross-chain DeFi platform using Solidity and Foundry.

## AI Integration Overview

### Core Innovation
Transform Alioth from single-token deposits to ANY-token deposits with AI-driven cross-token yield optimization. Users deposit any token (USDC, DAI, etc.) and AI automatically swaps portions to optimal yield-generating tokens, then deposits across best protocols.

### Architecture Pattern
- **Input**: User deposits any ERC20 token
- **AI Analysis**: Backend calculates optimal token allocation and protocol distribution
- **Execution**: Automated swaps + multi-token protocol deposits
- **Monitoring**: Continuous rebalancing across tokens and protocols

## Development Guidelines

### Enhanced Project Structure
- Extend existing `/src/core/` with AI integration contracts
- Add `/src/ai/` directory for AI-specific contracts and libraries
- Enhance `/src/libraries/` with cross-token mathematical operations
- Update `/src/interfaces/` with AI integration interfaces
- Extend deployment scripts in `/script/` for AI components

### AI Integration Solidity Patterns
- **Batch Operations**: Enable AI backend to execute multiple operations atomically
- **Price Validation**: Use Chainlink feeds to validate swap rates and prevent manipulation
- **Cross-Token Logic**: Implement mathematical models for cross-token yield optimization
- **Authorization System**: Secure AI backend operations with signature validation
- **Emergency Controls**: Implement circuit breakers for AI operations

### Enhanced Security Patterns
- **AI Authorization**: Multi-signature validation for AI backend operations
- **Price Anchoring**: Chainlink price feeds as source of truth for swap validation
- **Operation Limits**: Maximum slippage, token counts, and operation sizes
- **Replay Protection**: Nonce-based protection against operation replay
- **Emergency Shutdown**: Admin controls to halt AI operations

### AI-Specific Access Control
- **AI_BACKEND_ROLE**: Automated operations from authorized AI services
- **CROSS_TOKEN_REBALANCER_ROLE**: Cross-token rebalancing operations  
- **PRICE_VALIDATOR_ROLE**: Chainlink price validation management
- **AI_ADMIN_ROLE**: AI system configuration and authorization
- **EMERGENCY_AI_ROLE**: Emergency controls for AI operations

### Enhanced DeFi Integration
- **Universal Token Support**: Extend adapters to handle any ERC20 token
- **Cross-Token Yield Comparison**: Compare yields across different tokens and protocols
- **Optimal Swap Routing**: Integrate with DEX aggregators for best swap rates
- **Slippage Protection**: Enhanced protection using Chainlink price validation
- **MEV Resistance**: Price anchoring and batch operations to prevent MEV attacks

### AI-Enhanced Oracle Integration
- **Multi-Token Price Feeds**: Extend ChainlinkFeedManager for comprehensive price data
- **Yield Data Integration**: Use Chainlink Functions for off-chain yield data
- **Market Analysis**: Real-time market cap, volatility, and correlation data
- **Cross-Chain Price Consistency**: Ensure price consistency across chains
- **Fallback Mechanisms**: Robust fallback systems for AI decision making

### Cross-Token Gas Optimization
- **Batch Operations**: Minimize gas costs through intelligent batching
- **Packed Structures**: Optimize storage for cross-token operation parameters
- **View Function Optimization**: Gas-efficient calculations for AI decision making
- **Event-Driven Architecture**: Use events for off-chain AI monitoring and triggers
- **Lazy Evaluation**: Calculate complex operations only when needed

### AI Integration Testing Strategy
- **Cross-Token Scenarios**: Test full workflows from any token to optimal allocation
- **Price Manipulation Tests**: Validate protection against price oracle attacks
- **AI Backend Integration**: Test authorization and signature validation
- **Gas Optimization Tests**: Benchmark gas usage for batch operations
- **Emergency Scenario Tests**: Test circuit breakers and emergency controls

### Enhanced Documentation Requirements
- **AI Integration Architecture**: Document cross-token optimization algorithms
- **Authorization Flows**: Explain AI backend authorization and validation
- **Price Validation Logic**: Document Chainlink integration for swap validation
- **Emergency Procedures**: Document emergency controls and recovery procedures
- **Cross-Token Mathematics**: Explain yield optimization calculations

### AI-Specific Cross-Repository Integration
- **Backend API Integration**: Emit events for AI backend consumption
- **Frontend Universal Interface**: Support any token deposits through unified interface
- **Type Generation**: Generate TypeScript types for AI operation parameters
- **Monitoring Integration**: Provide data for AI performance monitoring
- **Alert Systems**: Integrate with monitoring for emergency situations

## Smart Contract Architecture

### Core AI Integration Contracts

#### EnhancedYieldOptimizer
```solidity
// Extends existing YieldOptimizer with AI integration
contract EnhancedYieldOptimizer is YieldOptimizer {
    function batchDepositFromAI(address[] tokens, uint256[] amounts, address user) external;
    function validateSwapRates(address inputToken, address outputToken, uint256 amountIn, uint256 expectedOut) external view returns (bool);
    function rebalanceAcrossTokens(CrossTokenRebalanceParams params) external;
}
```

#### AIAuthorizationManager  
```solidity
// Manages AI backend authorization and security
contract AIAuthorizationManager {
    function authorizeAIBackend(address backend) external;
    function validateAIOperation(bytes signature, bytes32 operationHash) external view returns (bool);
    function emergencyHaltAI() external;
}
```

#### CrossTokenOperationsLib
```solidity
// Mathematical operations for cross-token optimization
library CrossTokenOperationsLib {
    function calculateOptimalAllocation(TokenData[] tokens, uint256 inputAmount) internal pure returns (Allocation memory);
    function validateCrossTokenOperation(Allocation allocation, uint256 maxSlippage) internal pure returns (bool);
}
```

### Integration Points
- **ChainlinkFeedManager**: Enhanced with cross-token market analysis
- **Protocol Adapters**: Extended to support universal token compatibility
- **CCIP Integration**: Cross-chain AI operation coordination
- **Automation**: Chainlink Automation for AI-triggered rebalancing

Remember: All AI Integration features must maintain the highest security standards while enabling sophisticated cross-token yield optimization through AI-driven decision making.
